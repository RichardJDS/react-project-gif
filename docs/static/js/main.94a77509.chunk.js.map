{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":";qMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBF,OACE,0BAAMC,SAZe,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OAErCN,EAAc,OAepB,2BACIO,KAAK,OACLC,MAAOT,EACPU,SA9BsB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,gzMCRxB,IAAMG,EAAO,uCAAG,WAAOC,GAAP,sFAGbC,EAHa,iDAGmCC,UAAUF,GAH7C,+DAMAG,MAAMF,GANN,cAMbG,EANa,gBAOIA,EAAKC,OAPT,uBAOXC,EAPW,EAOXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAGXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAlBO,kBAmBZA,GAnBY,4CAAH,sDCaPS,EAAc,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAItC,OACE,yBAAKgB,UAAU,0CAEX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCfCS,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAQtB,ECXwB,SAACA,GAGzB,MAA0Bd,mBAAS,CAC/BoB,KAAK,GACLe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAU,WACNzB,EAAQC,GACPyB,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAKoB,EACLL,SAAS,SAGnB,CAACrB,IAUIsB,EDfwBK,CAAa3B,GAAhCY,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAOpB,OACI,oCACI,wBAAIJ,UAAU,0CAA0CjB,GAEvDqB,GAAW,uBAAGJ,UAAU,yCAAb,WACZ,yBAAKA,UAAU,aASPL,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACImB,IAAKnB,EAAIC,IACLD,UEjCnBoB,EAAe,WAG5B,MAAoC3C,mBAAS,CAAC,YAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAGE,OACE,oCACA,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAGA,4BAEQ6C,EAAWtB,KAAI,SAACR,GAKX,OAAO,kBAAC,EAAD,CACN4B,IAAK5B,EACLA,SAAUA,U,MCpB5B+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.94a77509.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport  PropTypes  from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState(''); //useState(); eso es undefined\r\n    const handleInputChange = (e)=>{\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        // console.log('sUBMIT HECHO');\r\n        if(inputValue.trim().length > 2){// se borra los espacion en blanco antes y despues y que\r\n          // sea mayor a dos letras y luegi hace la insercion\r\n          setCategories(cats=> [inputValue, ...cats]);\r\n          // luego lo borro para que no se repitan los estados\r\n          setInputValue('');\r\n        }\r\n    }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n    {/* <h1>{inputValue}</h1>  De esta manera puede ver que el estado de inputValue \r\n    cambia a medida que se dispara el evento\r\n    EL FRAGMENT <> </> sirve para agrupar ELEMENTOS HTML\r\n    UTILIZANDO FORM ya es un elemento que agrupa todos los elementos en su contenido\r\n    por lo cual ya no es necesario el fragment <> </>\r\n    pero si solo lo encierro en el elemento <form></form> cuando presiono enter refresca la pagina\r\n\r\n    \r\n    */}\r\n    <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange = {handleInputChange}\r\n    />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n\r\n    // encodeURI escapa los espacion colocando + o %20 , para que pueda solicitarlo de manera correcta\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=zeQ3rD0zNPcA918L0iefw2byjQUE7VKM`;\r\n    // si marca el error Uncaught (in promise) SyntaxError: Unexpected token < in JSON at position significa \r\n    // que el link esta mal\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            // url: img.images.downsized_medium.url funcion de esa manera pero si queremos verificar que esas\r\n            // imagenes tienen una url colocamos ese signo de interrogacion images?\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\n// export const GifGridItem = (props) => {\r\n\r\n//     console.log(props)\r\n\r\n//   return (\r\n//     <div>\r\n//         {/* {img.title} */}\r\n//     </div>\r\n//   )\r\n// }\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    // console.log(id, title, url)\r\n\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n        {/* {img.title} */}\r\n        <img src={url} alt={title}/>\r\n        <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n// import { useState, useEffect } from 'react'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // useEffect(() => {\r\n    //     getGifs(category).then(imgs => setImages(imgs));\r\n    // }, [])\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n\r\n\r\n\r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className='card animate__animated animate__fadeIn'>{category}</h3>\r\n            {/* {loading? 'Cargando...':'data cargada'} */}\r\n            {loading && <p className='card animate__animated animate__flash'>Loading</p>}\r\n            <div className=\"card-grid\">\r\n\r\n\r\n                {\r\n                    // primera menera funciona\r\n                    // images.map((img)=>{\r\n                    //     return <li key ={img.id}>{img.title}</li>\r\n                    // })\r\n                    // segunda manera desestructurando\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img} />\r\n                        // al utilizar el operador spread estoy enviando cada una de las imagenes como obejto de \r\n                        // manera independiente, y ya no como lo realiza el props , lo que hace es que \r\n                        // lo que enviamos lo encapsula en un objeto\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category)=>{\r\n    //puede tener su estado  y podria indicar a otros componentes cuando debe de renderizarse\r\n    // por que algo cambio\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n// los useEffect no pueden ser async ya que esperan algo sincrono\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n        .then(imgs =>{\r\n            setState({\r\n                data:imgs,\r\n                loading: false\r\n            });\r\n        })\r\n    },[category])\r\n\r\n    // setTimeout(()=>{\r\n    //     setState(\r\n    //         {\r\n    //             data:[1, 2, 4, 9],\r\n    //             loading: false\r\n    //         }\r\n    //     )\r\n    // },3000)\r\n    return state;\r\n}","import React from 'react'\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n// const [categories, setCategories] = useState(['One punch', 'Samurai x', 'Dragon Ball']);\r\nconst [categories, setCategories] = useState(['Paisaje']);\r\n\r\n\r\n  return (\r\n    <>\r\n    <h2>GifExpertApp</h2>\r\n    <AddCategory setCategories ={setCategories}/>\r\n    <hr />\r\n\r\n    \r\n    <ol>\r\n        {\r\n            categories.map((category) => {\r\n                // return <li key={category}>{category}</li>;\r\n                //<GifGrid category={category}/> si coloco asi como esta retorna un error\r\n                // Each child in a list should have a unique \"key\" prop, ya que\r\n                // en cada hijo de una lista debe de tener su key es por ello :\r\n                 return <GifGrid \r\n                  key={category}\r\n                  category={category}\r\n                />\r\n\r\n                // en la funciones flechas si el codigo se encuentra en la primera linea o segunda\r\n                // el return es explicito pero si colocas varias linea despues tienes que especificar\r\n                // el return es decir escribir el return\r\n              })\r\n        }\r\n    </ol>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}